// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.feature2;

import com.airatlovesmusic.base.BaseComponent;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFeature2Component implements Feature2Component {
  private final BaseComponent baseComponent;

  private final Feature2DependentModule feature2DependentModule;

  private DaggerFeature2Component(Feature2DependentModule feature2DependentModuleParam,
      BaseComponent baseComponentParam) {
    this.baseComponent = baseComponentParam;
    this.feature2DependentModule = feature2DependentModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Feature2Dependent getFeature2Dependent() {
    return Feature2DependentModule_AppModelFactory.appModel(feature2DependentModule, Preconditions.checkNotNull(baseComponent.getBaseRepository(), "Cannot return null from a non-@Nullable component method"), Preconditions.checkNotNull(baseComponent.getBaseNetwork(), "Cannot return null from a non-@Nullable component method"));}

  @Override
  public void inject(Feature2Fragment featureOneActivity) {
    injectFeature2Fragment(featureOneActivity);}

  private Feature2Fragment injectFeature2Fragment(Feature2Fragment instance) {
    Feature2Fragment_MembersInjector.injectFeature2Dependent(instance, getFeature2Dependent());
    return instance;
  }

  public static final class Builder {
    private Feature2DependentModule feature2DependentModule;

    private BaseComponent baseComponent;

    private Builder() {
    }

    public Builder feature2DependentModule(Feature2DependentModule feature2DependentModule) {
      this.feature2DependentModule = Preconditions.checkNotNull(feature2DependentModule);
      return this;
    }

    public Builder baseComponent(BaseComponent baseComponent) {
      this.baseComponent = Preconditions.checkNotNull(baseComponent);
      return this;
    }

    public Feature2Component build() {
      if (feature2DependentModule == null) {
        this.feature2DependentModule = new Feature2DependentModule();
      }
      Preconditions.checkBuilderRequirement(baseComponent, BaseComponent.class);
      return new DaggerFeature2Component(feature2DependentModule, baseComponent);
    }
  }
}
