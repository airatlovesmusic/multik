// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.multik.di.components;

import com.airatlovesmusic.multik.di.modules.NavigationModule;
import com.airatlovesmusic.multik.di.modules.NavigationModule_GetCiceroneFactory;
import com.airatlovesmusic.multik.di.modules.NavigationModule_GetNavigationHolderFactory;
import com.airatlovesmusic.multik.di.modules.NavigationModule_GetRouterFactory;
import com.airatlovesmusic.multik.ui.AppActivity;
import com.airatlovesmusic.multik.ui.AppActivity_MembersInjector;
import dagger.internal.Preconditions;
import ru.terrakok.cicerone.NavigatorHolder;
import ru.terrakok.cicerone.Router;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppActivityComponent implements AppActivityComponent {
  private final NavigationModule navigationModule;

  private final AppComponent appComponent;

  private DaggerAppActivityComponent(NavigationModule navigationModuleParam,
      AppComponent appComponentParam) {
    this.navigationModule = navigationModuleParam;
    this.appComponent = appComponentParam;
  }

  public static AppActivityComponent.Builder builder() {
    return new Builder();
  }

  private NavigatorHolder getNavigatorHolder() {
    return NavigationModule_GetNavigationHolderFactory.getNavigationHolder(navigationModule, NavigationModule_GetCiceroneFactory.getCicerone(navigationModule));}

  private Router getRouter() {
    return NavigationModule_GetRouterFactory.getRouter(navigationModule, NavigationModule_GetCiceroneFactory.getCicerone(navigationModule));}

  @Override
  public void inject(AppActivity appActivity) {
    injectAppActivity(appActivity);}

  private AppActivity injectAppActivity(AppActivity instance) {
    AppActivity_MembersInjector.injectNavigatorHolder(instance, getNavigatorHolder());
    AppActivity_MembersInjector.injectRouter(instance, getRouter());
    AppActivity_MembersInjector.injectApiService(instance, Preconditions.checkNotNull(appComponent.getApiService(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  private static final class Builder implements AppActivityComponent.Builder {
    private NavigationModule navigationModule;

    private AppComponent appComponent;

    @Override
    public Builder appNavigationModule(NavigationModule navigationModule) {
      this.navigationModule = Preconditions.checkNotNull(navigationModule);
      return this;
    }

    @Override
    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    @Override
    public AppActivityComponent build() {
      if (navigationModule == null) {
        this.navigationModule = new NavigationModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerAppActivityComponent(navigationModule, appComponent);
    }
  }
}
