// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.multik.di.components;

import com.airatlovesmusic.multik.data.network.ApiService;
import com.airatlovesmusic.multik.di.modules.ServerModule;
import com.airatlovesmusic.multik.di.modules.ServerModule_ProvideApiServiceFactory;
import com.airatlovesmusic.multik.di.modules.ServerModule_ProvideHttpLoggingFactory;
import com.airatlovesmusic.multik.di.modules.ServerModule_ProvideOkHttpClientFactory;
import com.airatlovesmusic.multik.di.modules.ServerModule_ProvideRetrofitFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<HttpLoggingInterceptor> provideHttpLoggingProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private DaggerAppComponent(ServerModule serverModuleParam) {

    initialize(serverModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ServerModule serverModuleParam) {
    this.provideHttpLoggingProvider = DoubleCheck.provider(ServerModule_ProvideHttpLoggingFactory.create(serverModuleParam));
    this.provideOkHttpClientProvider = DoubleCheck.provider(ServerModule_ProvideOkHttpClientFactory.create(serverModuleParam, provideHttpLoggingProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(ServerModule_ProvideRetrofitFactory.create(serverModuleParam, provideOkHttpClientProvider));
    this.provideApiServiceProvider = DoubleCheck.provider(ServerModule_ProvideApiServiceFactory.create(serverModuleParam, provideRetrofitProvider));
  }

  @Override
  public ApiService getApiService() {
    return provideApiServiceProvider.get();}

  public static final class Builder {
    private ServerModule serverModule;

    private Builder() {
    }

    public Builder serverModule(ServerModule serverModule) {
      this.serverModule = Preconditions.checkNotNull(serverModule);
      return this;
    }

    public AppComponent build() {
      if (serverModule == null) {
        this.serverModule = new ServerModule();
      }
      return new DaggerAppComponent(serverModule);
    }
  }
}
