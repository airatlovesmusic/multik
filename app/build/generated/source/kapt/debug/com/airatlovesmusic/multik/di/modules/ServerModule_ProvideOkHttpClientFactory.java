// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.multik.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServerModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final ServerModule module;

  private final Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider;

  public ServerModule_ProvideOkHttpClientFactory(ServerModule module,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    this.module = module;
    this.httpLoggingInterceptorProvider = httpLoggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, httpLoggingInterceptorProvider.get());
  }

  public static ServerModule_ProvideOkHttpClientFactory create(ServerModule module,
      Provider<HttpLoggingInterceptor> httpLoggingInterceptorProvider) {
    return new ServerModule_ProvideOkHttpClientFactory(module, httpLoggingInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(ServerModule instance,
      HttpLoggingInterceptor httpLoggingInterceptor) {
    return Preconditions.checkNotNull(instance.provideOkHttpClient(httpLoggingInterceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
