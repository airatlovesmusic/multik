// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.multik.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.terrakok.cicerone.Cicerone;
import ru.terrakok.cicerone.NavigatorHolder;
import ru.terrakok.cicerone.Router;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NavigationModule_GetNavigationHolderFactory implements Factory<NavigatorHolder> {
  private final NavigationModule module;

  private final Provider<Cicerone<Router>> ciceroneProvider;

  public NavigationModule_GetNavigationHolderFactory(NavigationModule module,
      Provider<Cicerone<Router>> ciceroneProvider) {
    this.module = module;
    this.ciceroneProvider = ciceroneProvider;
  }

  @Override
  public NavigatorHolder get() {
    return getNavigationHolder(module, ciceroneProvider.get());
  }

  public static NavigationModule_GetNavigationHolderFactory create(NavigationModule module,
      Provider<Cicerone<Router>> ciceroneProvider) {
    return new NavigationModule_GetNavigationHolderFactory(module, ciceroneProvider);
  }

  public static NavigatorHolder getNavigationHolder(NavigationModule instance,
      Cicerone<Router> cicerone) {
    return Preconditions.checkNotNull(instance.getNavigationHolder(cicerone), "Cannot return null from a non-@Nullable @Provides method");
  }
}
