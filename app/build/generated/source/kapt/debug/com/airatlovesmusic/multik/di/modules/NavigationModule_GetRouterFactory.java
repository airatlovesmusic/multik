// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.multik.di.modules;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.terrakok.cicerone.Cicerone;
import ru.terrakok.cicerone.Router;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NavigationModule_GetRouterFactory implements Factory<Router> {
  private final NavigationModule module;

  private final Provider<Cicerone<Router>> ciceroneProvider;

  public NavigationModule_GetRouterFactory(NavigationModule module,
      Provider<Cicerone<Router>> ciceroneProvider) {
    this.module = module;
    this.ciceroneProvider = ciceroneProvider;
  }

  @Override
  public Router get() {
    return getRouter(module, ciceroneProvider.get());
  }

  public static NavigationModule_GetRouterFactory create(NavigationModule module,
      Provider<Cicerone<Router>> ciceroneProvider) {
    return new NavigationModule_GetRouterFactory(module, ciceroneProvider);
  }

  public static Router getRouter(NavigationModule instance, Cicerone<Router> cicerone) {
    return Preconditions.checkNotNull(instance.getRouter(cicerone), "Cannot return null from a non-@Nullable @Provides method");
  }
}
