// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.base;

import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBaseComponent implements BaseComponent {
  private Provider<BaseNetwork> baseNetworkModuleProvider;

  private Provider<BaseRepository> baseRepositoryProvider;

  private DaggerBaseComponent(BaseNetworkModule baseNetworkModuleParam,
      BaseRepositoryModule baseRepositoryModuleParam) {

    initialize(baseNetworkModuleParam, baseRepositoryModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static BaseComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final BaseNetworkModule baseNetworkModuleParam,
      final BaseRepositoryModule baseRepositoryModuleParam) {
    this.baseNetworkModuleProvider = DoubleCheck.provider(BaseNetworkModule_BaseNetworkModuleFactory.create(baseNetworkModuleParam));
    this.baseRepositoryProvider = DoubleCheck.provider(BaseRepositoryModule_BaseRepositoryFactory.create(baseRepositoryModuleParam));
  }

  @Override
  public BaseNetwork getBaseNetwork() {
    return baseNetworkModuleProvider.get();}

  @Override
  public BaseRepository getBaseRepository() {
    return baseRepositoryProvider.get();}

  public static final class Builder {
    private BaseNetworkModule baseNetworkModule;

    private BaseRepositoryModule baseRepositoryModule;

    private Builder() {
    }

    public Builder baseNetworkModule(BaseNetworkModule baseNetworkModule) {
      this.baseNetworkModule = Preconditions.checkNotNull(baseNetworkModule);
      return this;
    }

    public Builder baseRepositoryModule(BaseRepositoryModule baseRepositoryModule) {
      this.baseRepositoryModule = Preconditions.checkNotNull(baseRepositoryModule);
      return this;
    }

    public BaseComponent build() {
      if (baseNetworkModule == null) {
        this.baseNetworkModule = new BaseNetworkModule();
      }
      if (baseRepositoryModule == null) {
        this.baseRepositoryModule = new BaseRepositoryModule();
      }
      return new DaggerBaseComponent(baseNetworkModule, baseRepositoryModule);
    }
  }
}
