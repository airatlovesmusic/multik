// Generated by Dagger (https://dagger.dev).
package com.airatlovesmusic.feature1;

import com.airatlovesmusic.base.BaseComponent;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFeature1Component implements Feature1Component {
  private final BaseComponent baseComponent;

  private final Feature1DependentModule feature1DependentModule;

  private DaggerFeature1Component(Feature1DependentModule feature1DependentModuleParam,
      BaseComponent baseComponentParam) {
    this.baseComponent = baseComponentParam;
    this.feature1DependentModule = feature1DependentModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Feature1Dependent getFeature1Dependent() {
    return Feature1DependentModule_AppModelFactory.appModel(feature1DependentModule, Preconditions.checkNotNull(baseComponent.getBaseRepository(), "Cannot return null from a non-@Nullable component method"), Preconditions.checkNotNull(baseComponent.getBaseNetwork(), "Cannot return null from a non-@Nullable component method"));}

  @Override
  public void inject(Feature1Fragment featureOneActivity) {
    injectFeature1Fragment(featureOneActivity);}

  private Feature1Fragment injectFeature1Fragment(Feature1Fragment instance) {
    Feature1Fragment_MembersInjector.injectFeatureOneDependent(instance, getFeature1Dependent());
    return instance;
  }

  public static final class Builder {
    private Feature1DependentModule feature1DependentModule;

    private BaseComponent baseComponent;

    private Builder() {
    }

    public Builder feature1DependentModule(Feature1DependentModule feature1DependentModule) {
      this.feature1DependentModule = Preconditions.checkNotNull(feature1DependentModule);
      return this;
    }

    public Builder baseComponent(BaseComponent baseComponent) {
      this.baseComponent = Preconditions.checkNotNull(baseComponent);
      return this;
    }

    public Feature1Component build() {
      if (feature1DependentModule == null) {
        this.feature1DependentModule = new Feature1DependentModule();
      }
      Preconditions.checkBuilderRequirement(baseComponent, BaseComponent.class);
      return new DaggerFeature1Component(feature1DependentModule, baseComponent);
    }
  }
}
